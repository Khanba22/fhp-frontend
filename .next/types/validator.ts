// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../src/app/auth/page.tsx
{
  const handler = {} as typeof import("../../src/app/auth/page.js")
  handler satisfies AppPageConfig<"/auth">
}

// Validate ../../src/app/help/page.tsx
{
  const handler = {} as typeof import("../../src/app/help/page.js")
  handler satisfies AppPageConfig<"/help">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../src/app/results/page.tsx
{
  const handler = {} as typeof import("../../src/app/results/page.js")
  handler satisfies AppPageConfig<"/results">
}

// Validate ../../src/app/review/page.tsx
{
  const handler = {} as typeof import("../../src/app/review/page.js")
  handler satisfies AppPageConfig<"/review">
}

// Validate ../../src/app/upload/page.tsx
{
  const handler = {} as typeof import("../../src/app/upload/page.js")
  handler satisfies AppPageConfig<"/upload">
}

// Validate ../../src/app/api/analysis/route.ts
{
  const handler = {} as typeof import("../../src/app/api/analysis/route.js")
  handler satisfies RouteHandlerConfig<"/api/analysis">
}

// Validate ../../src/app/api/generate-pdf/[jobId]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/generate-pdf/[jobId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/generate-pdf/[jobId]">
}

// Validate ../../src/app/api/health/route.ts
{
  const handler = {} as typeof import("../../src/app/api/health/route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ../../src/app/api/job/[jobId]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/[jobId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/[jobId]">
}

// Validate ../../src/app/api/job/delete/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/delete/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/delete">
}

// Validate ../../src/app/api/job/file/[jobId]/[filename]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/file/[jobId]/[filename]/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/file/[jobId]/[filename]">
}

// Validate ../../src/app/api/job/files/[jobId]/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/files/[jobId]/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/files/[jobId]">
}

// Validate ../../src/app/api/job/start/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/start/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/start">
}

// Validate ../../src/app/api/job/status/route.ts
{
  const handler = {} as typeof import("../../src/app/api/job/status/route.js")
  handler satisfies RouteHandlerConfig<"/api/job/status">
}

// Validate ../../src/app/api/jobs/route.ts
{
  const handler = {} as typeof import("../../src/app/api/jobs/route.js")
  handler satisfies RouteHandlerConfig<"/api/jobs">
}

// Validate ../../src/app/api/pdf/route.ts
{
  const handler = {} as typeof import("../../src/app/api/pdf/route.js")
  handler satisfies RouteHandlerConfig<"/api/pdf">
}

// Validate ../../src/app/api/review-data/route.ts
{
  const handler = {} as typeof import("../../src/app/api/review-data/route.js")
  handler satisfies RouteHandlerConfig<"/api/review-data">
}

// Validate ../../src/app/api/review-pdf/route.ts
{
  const handler = {} as typeof import("../../src/app/api/review-pdf/route.js")
  handler satisfies RouteHandlerConfig<"/api/review-pdf">
}





// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
